NOTES FOR MISSING CR

Marco created a script that allows us to remove arbitrary items from the database (clinical reports, genomes, variant_report, phevor_reports,  vaast_reports) give a list of ID's to remove.

I created a pre-script that generates a list of ID's to remove.   There are different scripts for different criteria.

    One was based on workspace_id and month.   Remove all objects given a particular workspace_id on or before the given month.
    
    There are two other scripts one based on pipeline_Version that we run for test and dev to remove things before a given date
    
After these items are removed.   There is a second set of low level routines that goes through the reportdb and the vriantdb and removes items that no longer have parents.

    These scripts are run from time to time on dev/test to keep their size in check (1 month of dev data) 2 months of test data.
    
    The high level scripts in production only run when a set of criteria is provided to remove data from a given database (to remove U/I entries).
    
    The low level scripts have been run more often to clear out space in the variantdb and reportdb but have not been run in quite some time.

Timeline of events:


Thursday 8-30 Birgit came to me with a list of 162 clinical_reports that are in the clinical_report table but not in the workspace_object table.

    The items remove were all removed back in Nov of last year I believe.   So this data has been gone for like 9 months or so.
    
    The missing data seems to have been removed on 12/06/2017  (9 months ago).  It was part of a purge.

    That afternoon we were able to restore 121 of these items b/c the underlying data looked sound.
    
    41 or the records where missing CR history (we needed CR history to re-construct the workspace_object record)
        NOTE: it look to me like they were every fully realized as completed reports.


    There is an odd set of deleted Genome records in the audit trail that matches exactly the list cr records to delete.  I suspect this is human error
        and the list of cr's to delete were passed to the genome delete or vice-a-versa.

Today: We have 41 remaining missing CR's that is CRs in the clinical_report table, that are not in workspace_object.

    4 of these are intentional testing data (they don't have a genome yet).  They oddly have no CR history as well.
    
    37 of them have
    
        genomes
        we can get the workspace_id from the genome
            we can get the workspace_id from the genome
            
        10 of these have some clinical_report_history
        
            we can use this to put a 'last' modifed date and modified by on the workspace_object record.
        
        All 37 of the clinical reports have matching entries in reportdb.report (did not check on child rows, but lots of RI there so it sould be OK).
        
        
    
    
    
My Theory AKA, what happened.

    We finished up the purge of things normally.   
    We run a final script that goes looking for genomes w/o CR's or Variant Reports.  The script generates a list of genomes_id's to be deleted.
    
    Based on the history, it looks like we ran the purginator script and passed the clinical_report operator to the script but fed it a list of genome id's
    
        This would be an error.
        
    It could happen a few ways, but they all add up to human error.   Either we run the script to generate a list of genomes but saved it to the CR file.
    
    Or we passed a file with a list of genome_id's in it to the purginator by mistake.  
    
    Either way it is human error, and it happend so long ago it would be really hard to sus out what happened.  Just from memory.
    
    I can't seem to find where we ran this from, the maintemance machine as a dump of the database is would be the most likely place we would run this.
    But the /tmp/ directory is where we would put these logs and that has long ago been wiped out from the normal reboots and cleanups of that directory.
    
        
    I just found a dump of the database taken right before the purges. 
    I loaded it into a new schema and will check if the missing workspace_object records exist there.  If they do.  We can use that as a basis to restore 
    the missing data.
    
    
The fixes:

    We identified 162 clinical reports that where accidentally dropped (removed from workspace_object table). 
    
    5 were still waiting for genomes, so those don't have reportdb.report entries.
    
    121 were inserted into the workspace_object based on information in clinical_report, genome and clinical_report_history table.
    41 where inserted based on data found in the backup.

    I restored the database webapp_old from the backup at /srv/webapp2_backup/webapp2_20171206.sql.gz
        created on Dec  6  2017 2017-12-06 19:43:37.725035534
        
    I backed up current webapp2 tables that were to potentially be updated.
    
        CREATE TABLE webapp2.workspace_object_20180913 AS SELECT * FROM webapp2.workspace_object;
        CREATE TABLE webapp2.clinical_report_member_20180913 AS SELECT * FROM webapp2.clinical_report_member;
        CREATE TABLE webapp2.clinical_report_pdf_20180913 AS SELECT * FROM webapp2.clinical_report_pdf;
        CREATE TABLE webapp2.clinical_report_history_20180913 AS SELECT * FROM webapp2.clinical_report_history;
    
        dbshard1 tables
        
            CREATE TABLE reportdb.report_20180913 AS SELECT * FROM reportdb.report;

        dbshard2 tables
        
            CREATE TABLE reportdb.report_20180913 AS SELECT * FROM reportdb.report;
            
            
    I inserted the missing workspace_object table entries for the 41 (still outstanding). 

            INSERT INTO webapp2.workspace_object
            SELECT wso_o.*
            FROM webapp2.tmp_cr_162 t
            LEFT JOIN webapp_old.workspace_object wso_o
                ON t.wso_id = wso_o.id
            LEFT JOIN webapp2.workspace_object wso_n
                ON t.wso_id = wso_n.id
            WHERE wso_n.id IS NULL;
            
    Clinical Report History was correct.
    
    Clinical Report PDF was correct.
    
    Clinical Report Member was correct.
    
    
    Updated reportdb.report.deleted=0 for the list of reports
    
        no shard: 5 reports
        
            5 of these reports are waiting for a genome and have no reportdb entry
            
        shard1:  138 reports
        
            -- 138
            -- SELECT r.* FROM
            UPDATE 
            reportdb.report r
            INNER JOIN webapp2.clinical_report cr
                ON r.id = cr.reportdb_report_id
            INNER JOIN webapp2.tmp_cr_162 t
                ON cr.wso_id = t.wso_id    
            INNER JOIN webapp_old.workspace_object wso
                ON wso.id = t.wso_id
            INNER JOIN webapp2.tmp_shard_map_final m
                ON m.shard_pipeline_version = cr.pipeline_version
                AND wso.workspace_id = m.workspace_id
            SET deleted=0
            WHERE 1=1
            AND m.shard_name = 'dbshard1'
            -- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
            ;
            
        shard2: 19 reports
    
            UPDATE 
            reportdb.report r
            INNER JOIN webapp2.clinical_report cr
                ON r.id = cr.reportdb_report_id
            INNER JOIN webapp2.tmp_cr_162 t
                ON cr.wso_id = t.wso_id    
            INNER JOIN webapp_old.workspace_object wso
                ON wso.id = t.wso_id
            INNER JOIN webapp2.tmp_shard_map_final m
                ON m.shard_pipeline_version = cr.pipeline_version
                AND wso.workspace_id = m.workspace_id
            SET deleted=0
            WHERE 1=1
            AND m.shard_name = 'dbshard2'
            -- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
            ;


Incidental Findings...

    Problem1: Clinical_report_history
    
        It appears that reports generated via that API do not get a 'created' 
        record added to the clinical_report_history table.
    
        There may be other missing data there.
    
        We should open a bug about this, and test that all normal history is created for these records.
    
    Things I learned:
    
        Pannels do not get entries added to the clinical_report_member table.
        We should probably do this for completness of the model.
        
        Panels don't get report_variant_selectable entries created.
        We probably should leave this alone, just surprising to find
        a CR w/o rvs records.
        
        Not all CRs have data in report_variant_base.  This appears to be
        happening when the filter criteria for the CR does not select any
        data. A condition you often see with panels.  But some exome type CRs 
        also had this 'condition'.   The one I looked at was based on a very
        small variant report 5 variants.
        
Follow-up:

    I will modify the purginator code to check for a type column in the 
    input data.   We will modify the tools to generate this column when making
    lists.
    
    You could still incorrectly mark a list by and, but that would be rarer 
    thing to do.
    
    
        
----------------------------------  INCENTENTIAL Queries used to work on this case...

DROP TABLE webapp2.tmp_cr_41;
CREATE TABLE webapp2.tmp_cr_41 AS
SELECT * FROM webapp2.clinical_report cr
LEFT JOIN webapp2.workspace_object wso
    ON wso.id = cr.wso_id
WHERE wso.id IS NULL
;

-- cr's that were restored.
SELECT * FROM tmp_wso_cr_missing;


SELECT * FROM webapp2.clinical_report cr
LEFT JOIN webapp2.workspace_object wso
    ON wso.id = cr.wso_id
INNER JOIN webapp2.tmp_wso_cr_missing t
    ON t.id = cr.wso_id
WHERE wso.id IS NULL
;

-- test cases
CREATE TABLE tmp_cr_41_4_broken_tests AS
SELECT * FROM tmp_cr_41 t
WHERE t.genome_id IS  NULL;

-- has genome
CREATE TABLE tmp_cr_w_genome_37 AS
SELECT * FROM tmp_cr_41 t
WHERE t.genome_id IS NOT NULL;

SELECT u.login, p_wso.*, t.* 
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
;

-- none of the 41 in this list were intended to be deleted!
SELECT u.login,g_user.login, p.project_name, p_wso.workspace_id, d.*, t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN webapp2.`tmp_cr_dec_2017_to_delete` d
    ON d.clinical_report_id = t.wso_id
;

-- none of the 37 in this list were intended to be deleted!
SELECT u.login,g_user.login, p.project_name, p_wso.workspace_id, d.*, t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN webapp2.`tmp_cr_dec_2017_to_delete` d
    ON d.clinical_report_id = t.wso_id
;

-- how many have cr history 10
CREATE TABLE tmp_cr_w_history_10 AS
-- SELECT u.login,g_user.login, p.project_name, p_wso.workspace_id, sum_cr_history.num_cr_history, t.*
SELECT t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN (SELECT clinical_report_id, count(*) num_cr_history 
        FROM webapp2.clinical_report_history 
        GROUP BY clinical_report_id) sum_cr_history
    ON sum_cr_history.clinical_report_id = t.wso_id
WHERE sum_cr_history.clinical_report_id IS NOT NULL 
;


-- the 41 with genomes and some cr history (but not standard history, some items are missing)
SELECT u.login,g_user.login, p.project_name, p_wso.workspace_id, sum_cr_history.num_cr_history, t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN (SELECT clinical_report_id, count(*) num_cr_history 
        FROM webapp2.clinical_report_history 
        GROUP BY clinical_report_id) sum_cr_history
    ON sum_cr_history.clinical_report_id = t.wso_id
WHERE sum_cr_history.clinical_report_id IS NOT NULL 
;


SELECT DISTINCT object_type FROM webapp2.audit_trail;

-- audit trail for the 10 are incomplete as well.  Most just have a one has a submit and approve report entry.
SELECT sum_audit_trail.cnt, a.action, t.*
FROM webapp2.tmp_cr_w_history_10 t
LEFT JOIN (SELECT count(*) cnt, object_id FROM  webapp2.audit_trail WHERE object_type IN ('clinical_report','ClinicalReport') GROUP BY object_id) sum_audit_trail
    ON sum_audit_trail.object_id = t.wso_id
LEFT JOIN webapp2.audit_trail a
    ON a.object_type IN ('clinical_report','ClinicalReport') 
    AND a.object_id = t.wso_id
ORDER BY t.wso_id, a.id;


-- now need to focus on the remaining 27 reports they don't have any cr_history, do they hve audit history?

DROP TABLE IF EXISTS webapp2.tmp_cr_41_27;
CREATE TABLE webapp2.tmp_cr_41_27 AS
SELECT  t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN (SELECT clinical_report_id, count(*) num_cr_history 
        FROM webapp2.clinical_report_history 
        GROUP BY clinical_report_id) sum_cr_history
    ON sum_cr_history.clinical_report_id = t.wso_id
WHERE sum_cr_history.clinical_report_id IS NULL 
;


SELECT  sum_cr_history.num_cr_history, u.login, g_user.login, p.wso_id, p.`project_name`, g.id,t.*
FROM webapp2.tmp_cr_w_genome_37 t
INNER JOIN webapp2.genomes g
    ON g.id = t.genome_id
INNER JOIN webapp2.projects p
    ON p.wso_id = g.project_id
INNER JOIN webapp2.workspace_object p_wso
    ON p_wso.id = p.wso_id
INNER JOIN webapp2.user u 
    ON u.id = p_wso.modified_by
INNER JOIN webapp2.user g_user
    ON g.uploaded_by = g_user.id
LEFT JOIN (SELECT clinical_report_id, count(*) num_cr_history 
        FROM webapp2.clinical_report_history 
        GROUP BY clinical_report_id) sum_cr_history
    ON sum_cr_history.clinical_report_id = t.wso_id
INNER JOIN webapp2.
WHERE sum_cr_history.clinical_report_id IS NULL 
;


SELECT a.* 
FROM webapp2.tmp_wso_cr_missing t
INNER JOIN webapp2.audit_trail a
    ON t.id = a.object_id
WHERE a.user_id = 1
ORDER BY object_id, id
;

SELECT * FROM  webapp2.tmp_wso_cr_missing t
LEFT JOIN webapp_old.workspace_object wso
    ON wso.id = t.id;
   
SELECT wso.*, t.* FROM  webapp2.tmp_cr_41 t
LEFT JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id;
    
/*                 session.query(ClinicalReportMember) \
                    .filter(ClinicalReportMember.clinical_report_id == clinical_report.id).delete()
                session.query(ClinicalReportPDF) \
                    .filter(ClinicalReportPDF.clinical_report_id == clinical_report.id).delete()
                session.query(ClinicalReportHistory) \
                    .filter(ClinicalReportHistory.clinical_report_id == clinical_report.id).delete()
                IF clinical_report.reportdb_report_id AND clinical_report.pipeline_version:
                    report = vdb_session.query(ReportDbReport).get(
                        clinical_report.reportdb_report_id)
                    IF report:
                        report.deleted = TRUE
                        vdb_session.add(report)
                session.delete(clinical_report)
*/

CREATE TABLE webapp2.workspace_object_20180913 AS SELECT * FROM webapp2.workspace_object;
CREATE TABLE webapp2.clinical_report_member_20180913 AS SELECT * FROM webapp2.clinical_report_member;
CREATE TABLE webapp2.clinical_report_pdf_20180913 AS SELECT * FROM webapp2.clinical_report_pdf;
CREATE TABLE webapp2.clinical_report_history_20180913 AS SELECT * FROM webapp2.clinical_report_history;

SELECT count(*) FROM webapp2.tmp_wso_cr_missing;
SELECT 121 + 41;

-- 162
DROP TABLE IF EXISTS webapp2.tmp_cr_162;
CREATE TABLE webapp2.tmp_cr_162
SELECT id wso_id 
FROM webapp2.tmp_wso_cr_missing
UNION
SELECT wso_id FROM tmp_cr_41;

ALTER TABLE webapp2.tmp_cr_162 ADD PRIMARY KEY (wso_id);

SELECT * 
FROM webapp2.tmp_cr_162 t
LEFT JOIN webapp_old.workspace_object wso_o
    ON t.wso_id = wso_o.id
LEFT JOIN webapp2.workspace_object wso_n
    ON t.wso_id = wso_n.id
WHERE wso_n.id IS NULL;

SELECT crm_o.genome_id, crm_n.genome_id, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type, cr.reportdb_report_id
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
LEFT JOIN webapp_old.clinical_report_member crm_o
    ON t.wso_id = crm_o.clinical_report_id
LEFT JOIN webapp2.clinical_report_member crm_n
    ON crm_o.clinical_report_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.genome_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
-- WHERE wso_n.id IS NULL;
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
WHERE 1=1
AND cr.genome_id IS NULL
-- AND coalesce(crm_o.genome_id,-1) !=  coalesce(crm_n.genome_id, -1)
-- AND crm_o.id IS NULL
ORDER BY cr.wso_id
;


-- Look for info about crh

SELECT  crh_o.*, crh_n.*, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN (SELECT count(*) old_cnt, clinical_report_id FROM webapp_old.clinical_report_history GROUP BY clinical_report_id) crh_o
    ON t.wso_id = crh_o.clinical_report_id
LEFT JOIN (SELECT count(*) new_cnt, clinical_report_id FROM webapp2.clinical_report_history GROUP BY clinical_report_id) crh_n
    ON t.wso_id = crh_n.clinical_report_id
/*
LEFT JOIN webapp2.clinical_report_member crm_n
    ON t.wso_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.clinical_report_id */
WHERE 1=1
AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY cr.wso_id
;

SELECT  crh_o.*, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN webapp_old.clinical_report_history crh_o
    ON t.wso_id = crh_o.clinical_report_id
    AND crh_o.event = 'created'
/*
LEFT JOIN webapp2.clinical_report_member crm_n
    ON t.wso_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.clinical_report_id */
WHERE 1=1
AND cr.genome_id IS NOT NULL
AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY  wso.workspace_id
;

SELECT  crh_o.*, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN webapp_old.clinical_report_history crh_o
    ON t.wso_id = crh_o.clinical_report_id
    AND crh_o.event = 'created'
/*
LEFT JOIN webapp2.clinical_report_member crm_n
    ON t.wso_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.clinical_report_id */
WHERE 1=1
AND cr.genome_id IS NOT NULL
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY  wso.workspace_id
;

-- NOTING missing in CRH


-- looking for missing informatin in CR_PDF
SELECT  crh_o.*, cr.genome_id, crs.label , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.clinical_report cr
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = cr.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN (SELECT count(*) old_cnt, clinical_report_id FROM webapp_old.clinical_report_pdf GROUP BY clinical_report_id) crh_o
    ON cr.wso_id = crh_o.clinical_report_id

/*
LEFT JOIN webapp2.clinical_report_member crm_n
    ON t.wso_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.clinical_report_id */
WHERE 1=1
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
AND wso.workspace_id = 1156
ORDER BY cr.wso_id
;

-- NOTHING MISSING in clinical_report_PDF

-- Check on reportdb.report.deleted

SELECT  crh_o.*, crh_n.*, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN (SELECT count(*) old_cnt, clinical_report_id FROM webapp_old.clinical_report_pdf GROUP BY clinical_report_id) crh_o
    ON t.wso_id = crh_o.clinical_report_id
LEFT JOIN (SELECT count(*) new_cnt, clinical_report_id FROM webapp2.clinical_report_pdf GROUP BY clinical_report_id) crh_n
    ON t.wso_id = crh_n.clinical_report_id
/*
LEFT JOIN webapp2.clinical_report_member crm_n
    ON t.wso_id = crm_n.clinical_report_id
    AND crm_o.genome_id = crm_n.clinical_report_id */
WHERE 1=1
AND m.shard_name = 'dbshard1'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY cr.wso_id
;

SELECT * FROM webapp2.reports WHERE id = 733316;

SELECT * FROM webapp2.genomes WHERE id = 913568;

SELECT * FROM webapp2.projects WHERE wso_id = 48011;

SELECT * FROM webapp2.workspace_object WHERE id = 219121;

SELECT * FROM webapp2.tmp_shard_map_final WHERE workspace_id = 1386 AND shard_pipeline_version = '6.0.7'
;

-- FIXES
-- insert missing wso records...

INSERT INTO webapp2.workspace_object
SELECT wso_o.*
FROM webapp2.tmp_cr_162 t
LEFT JOIN webapp_old.workspace_object wso_o
    ON t.wso_id = wso_o.id
LEFT JOIN webapp2.workspace_object wso_n
    ON t.wso_id = wso_n.id
WHERE wso_n.id IS NULL;


-- insert the missing





    
---------------- SHARD1 ----------
-- EXPLAIN EXTENDED
SELECT  r.deleted, rvb.*,  
    CASE WHEN EXISTS (SELECT * FROM reportdb.report_variant_selectable rvs WHERE rvs.report_id = r.id LIMIT 1) THEN 1 ELSE 0 END has_rvs,
    cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN reportdb.report r
    ON r.id = cr.reportdb_report_id
LEFT JOIN (SELECT count(*) rvb_cnt, report_id FROM  reportdb.report_variant_base  GROUP BY report_id) rvb
    ON rvb.report_id = r.id
WHERE 1=1
AND m.shard_name = 'dbshard1'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY has_rvs, workspace_id
;

SELECT count(*) FROM reportdb.report_variant_selectable WHERE report_id = 16314;


CREATE TABLE reportdb.report_20180913 AS SELECT * FROM reportdb.report;

-- 138
-- SELECT r.* FROM
UPDATE 
reportdb.report r
INNER JOIN webapp2.clinical_report cr
    ON r.id = cr.reportdb_report_id
INNER JOIN webapp2.tmp_cr_162 t
    ON cr.wso_id = t.wso_id    
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
SET deleted=0
WHERE 1=1
AND m.shard_name = 'dbshard1'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
;


---------------- SHARD2 ----------

SELECT * FROM variantdb.annotatedgenome WHERE id = 983793;

SELECT count(*) FROM variantdb.vmv_base WHERE variantset_id = 983793;

SELECT  r.deleted, rvb.*, cr.genome_id, crs.label, t.* , w.name, cr.variant_report_id, cr.wso_id clinical_report_id , u.login, cr.pipeline_version, wso.workspace_id, m.shard_name, cr.test_type
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp2.cr_status crs
    ON crs.wso_id = cr.cr_status_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.user u 
    ON u.id = wso.created_by
LEFT JOIN webapp_old.workspace w
    ON w.id = wso.workspace_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN reportdb.report r
    ON r.id = cr.reportdb_report_id
LEFT JOIN (SELECT count(*), report_id FROM  reportdb.report_variant_base  GROUP BY report_id) rvb
    ON rvb.report_id = r.id
WHERE 1=1
AND m.shard_name = 'dbshard2'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
ORDER BY cr.wso_id
;

-- 19
SELECT  r.* 
FROM webapp2.tmp_cr_162 t
INNER JOIN webapp2.clinical_report cr
    ON cr.wso_id = t.wso_id
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
LEFT JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
LEFT JOIN reportdb.report r
    ON r.id = cr.reportdb_report_id
WHERE 1=1
AND m.shard_name = 'dbshard2'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
;

    CREATE TABLE reportdb.report_20180913 AS SELECT * FROM reportdb.report;
    
    
-- update database
-- 19
SELECT r.* FROM
-- UPDATE 
reportdb.report r
INNER JOIN webapp2.clinical_report cr
    ON r.id = cr.reportdb_report_id
INNER JOIN webapp2.tmp_cr_162 t
    ON cr.wso_id = t.wso_id    
INNER JOIN webapp_old.workspace_object wso
    ON wso.id = t.wso_id
INNER JOIN webapp2.tmp_shard_map_final m
    ON m.shard_pipeline_version = cr.pipeline_version
    AND wso.workspace_id = m.workspace_id
-- SET deleted=0
WHERE 1=1
AND m.shard_name = 'dbshard2'
-- AND coalesce(crh_o.old_cnt,-1) != coalesce(crh_n.new_cnt,-1)
;








    


